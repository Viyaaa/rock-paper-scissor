# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lRCsOeNJjCBrjF1KdGXLAm7HX6d8cRIN

> Nama: Grivia Trifosa Iskandar
"""

# import library

import tensorflow as tf
import zipfile, os
import pandas as pd
import matplotlib.pyplot as plt

!wget https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip -O /tmp/rockpaperscissors.zip

local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

base_dir = '/tmp/rockpaperscissors/rps-cv-images'
paper_dir = os.path.join(base_dir, 'paper')
rock_dir = os.path.join(base_dir, 'rock')
scissors_dir = os.path.join(base_dir, 'scissors')
os.listdir(base_dir)

print("Paper length: ", len(os.listdir(paper_dir)))
print("Rock length: ", len(os.listdir(rock_dir)))
print("Scissors length: ", len(os.listdir(scissors_dir)))

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# menggunakan validation_split pada train dan validation sebanyak 6:4

train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    vertical_flip=True,
                    height_shift_range = .2,
                    fill_mode = 'nearest',
                    validation_split=0.4)

validation_datagen = ImageDataGenerator(
                    rescale=1./255,
                    validation_split=0.4)

train_generator = train_datagen.flow_from_directory(
    base_dir,
    target_size=(150,150),
    batch_size=32,
    class_mode='categorical',
    subset='training')

validation_generator = validation_datagen.flow_from_directory(
    base_dir,
    target_size=(150,150),
    batch_size=32,
    class_mode='categorical',
    subset='validation')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.summary()

model.compile(
    loss='categorical_crossentropy',
    optimizer=tf.optimizers.Adam(),
    metrics=['accuracy']
)

from tensorflow.keras.callbacks import Callback

# create custom callback
class CustomCallback(Callback):
  def on_epoch_end(self, epoch, logs={}):
    if logs.get('accuracy') > 0.96:
      print('Accuracy above 96% -- Stop Training')
      self.model.stop_training = True # Stop model training

my_callback = CustomCallback()

history = model.fit(
    train_generator,
    epochs=20,
    validation_data=validation_generator,
    verbose=1,
    callbacks = [my_callback]
)

pd.DataFrame(history.history)[['accuracy','val_accuracy']].plot()
plt.title("Accuracy")
plt.show()

pd.DataFrame(history.history)[['loss','val_loss']].plot()
plt.title("Loss")
plt.show()

model.save_weights('My_model.h5')
model.load_weights('My_model.h5')

test_acc = model.evaluate(validation_generator, verbose=0)[1]
print("## Model Accuracy on Test Data: ", round(test_acc,3))

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

def predict_rps():
  uploaded = files.upload()
 
  for fn in uploaded.keys():
  
    # predicting images
    path = fn
    img = image.load_img(path, target_size=(150,150))
    imgplot = plt.imshow(img)
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    images = np.vstack([x])
  
    classes = model.predict(images, batch_size=10)  
    print(fn)
    print(classes)
    if classes[0,0] == 1.0:
      print('Paper')
    elif classes[0,1] == 1.0:
      print('Rock')
    else:
      print('Scissors')

predict_rps()

predict_rps()

predict_rps()